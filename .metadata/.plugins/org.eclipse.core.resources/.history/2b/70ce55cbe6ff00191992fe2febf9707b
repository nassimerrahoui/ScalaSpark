package TP5
import org.apache.spark.SparkConf
import org.apache.spark.SparkContext
import org.apache.spark.streaming.StreamingContext
import org.apache.spark.streaming.Seconds

object TwitGenerator extends App {
    val conf = new SparkConf().setAppName("Custom Touitte").setMaster("local[*]")
    val sc = new SparkContext(conf)
    val ssc = new StreamingContext(sc, Seconds(1))
    val lines = ssc.socketTextStream("127.0.0.1", 4242)
    
    val words = lines.flatMap(_.split(" "))
    val twits = words.filter(s => s.contains("#"))
    val pair_twits = twits.map(t => (t,1))
    val tcs = pair_twits.reduceByKey(_ + _)
    val cumul_tcs = tcs.updateStateByKey((tcs, state : Option[Int]) => state match {
      case None => if(tcs.length == 0) Some(0) else Some(tcs.reduce(_+_)) 
      case Some(n) => if(tcs.length == 0) Some(n) else Some(n + tcs.reduce(_ +_))
    })
    val sorted_tcs = cumul_tcs.transform(line =>{line.sortBy(_._2, false)})
    ssc.checkpoint("src/TP5/Twit");
    cumul_tcs.print()
    
    ssc.start()
    ssc.awaitTermination()
}